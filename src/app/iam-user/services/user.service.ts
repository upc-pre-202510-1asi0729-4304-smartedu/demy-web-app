import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UserAccount } from '../model/user.entity';
import { environment } from '../../../environments/environment';

/**
 * Service responsible for managing user account operations such as registration,
 * retrieval, update, deletion, and role-based access logic.
 *
 * @remarks
 * Provided in the root level of the application.
 */

@Injectable({
  providedIn: 'root'
})
export class UserService {
  /** API base URL for user endpoints */

  private apiUrl = `${environment.apiBaseUrl}${environment.usersEndpointPath}`;
  private resetPasswordUrl = `${environment.apiBaseUrl}${environment.usersEndpointPath}${environment.resetPasswordPath}`;

  /**
   * Initializes the service with Angular's HttpClient.
   *
   * @param http - Angular HttpClient used for performing HTTP requests
   */

  constructor(private http: HttpClient) {}

  /**
   * Registers a new user in the backend system.
   *
   * @param user - The user account data, excluding the `id` (auto-generated by backend)
   * @returns An Observable that emits the created {@link UserAccount} object
   */
  registerUser(user: Omit<UserAccount, 'id'>): Observable<UserAccount> {
    return this.http.post<UserAccount>(this.apiUrl, user);
  }

  /**
   * Retrieves all user accounts that match a given email address.
   *
   * @param email - The email address used for filtering user accounts
   * @returns An Observable that emits an array of {@link UserAccount} objects
   */
  getUserByEmail(email: string): Observable<UserAccount[]> {
    return this.http.get<UserAccount[]>(`${this.apiUrl}?email=${email}`);
  }

  /**
   * Updates the password of a user by their ID.
   *
   * @param id - The ID of the user whose password is to be updated
   * @param newPassword - The new password to assign
   * @returns An Observable that emits the updated {@link UserAccount}
   */
  updatePasswordById(id: number, newPassword: string): Observable<UserAccount> {
    return this.http.put<UserAccount>(`${this.apiUrl}/${id}`, { passwordHash: newPassword });
  }



  /**
   * Deletes a user account by ID.
   *
   * @param userId - The ID of the user to be deleted
   * @returns An Observable that completes once deletion is successful
   */
  deleteUser(userId: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${userId}`);
  }

  /**
   * Retrieves the current user's role from local storage.
   *
   * @returns The role of the user as a string, or `null` if not found or invalid
   */
  getUserRole(): string | null {
    const userData = localStorage.getItem('userData');
    if (!userData) return null;
    try {
      return JSON.parse(userData).role ?? null;
    } catch {
      return null;
    }
  }

  /**
   * Checks whether the current user has an admin role.
   *
   * @returns `true` if the user is an admin, otherwise `false`
   */
  isAdmin(): boolean {
    return this.getUserRole() === 'ADMIN';
  }

  /**
   * Checks whether the current user has a teacher role.
   *
   * @returns `true` if the user is a teacher, otherwise `false`
   */
  isTeacher(): boolean {
    return this.getUserRole() === 'TEACHER';
  }

  /**
   * Clears user-related data stored in local storage.
   */
  clearUserData(): void {
    localStorage.removeItem('userData');
    localStorage.removeItem('teacherId');
  }


  /**
   * Sends a password reset request to the backend using the user's email.
   *
   * @param email - The email address of the user requesting password reset
   * @param newPassword - The new password to set for the user
   * @returns An Observable that completes once the password is successfully reset
   */

  resetPassword(email: string, newPassword: string): Observable<void> {
    const body = { email, newPassword };
    return this.http.put<void>(this.resetPasswordUrl, body);
  }

}
